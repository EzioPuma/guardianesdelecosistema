{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":78,"position":78,"stack":[[{"start":{"row":0,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["from flask import Flask, render_template","","app = Flask(__name__)","","@app.route('/login')","def login():","    return render_template('login.html')","","@app.route('/register')","def register():","    return render_template('register.html')","","if __name__ == '__main__':","    app.run(debug=True)",""],"id":33}],[{"start":{"row":12,"column":0},"end":{"row":14,"column":0},"action":"remove","lines":["if __name__ == '__main__':","    app.run(debug=True)",""],"id":34},{"start":{"row":12,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["if __name__ == '__main__':","    app.run(debug=True, port=5001)",""]}],[{"start":{"row":12,"column":0},"end":{"row":13,"column":34},"action":"remove","lines":["if __name__ == '__main__':","    app.run(debug=True, port=5001)"],"id":35},{"start":{"row":12,"column":0},"end":{"row":14,"column":0},"action":"insert","lines":["if __name__ == '__main__':","    app.run(debug=True, port=8080, host='0.0.0.0')",""]}],[{"start":{"row":13,"column":29},"end":{"row":13,"column":33},"action":"remove","lines":["8080"],"id":36},{"start":{"row":13,"column":29},"end":{"row":13,"column":30},"action":"insert","lines":["5"]},{"start":{"row":13,"column":30},"end":{"row":13,"column":31},"action":"insert","lines":["0"]},{"start":{"row":13,"column":31},"end":{"row":13,"column":32},"action":"insert","lines":["0"]},{"start":{"row":13,"column":32},"end":{"row":13,"column":33},"action":"insert","lines":["0"]}],[{"start":{"row":13,"column":29},"end":{"row":13,"column":33},"action":"remove","lines":["5000"],"id":37},{"start":{"row":13,"column":29},"end":{"row":13,"column":30},"action":"insert","lines":["8"]},{"start":{"row":13,"column":30},"end":{"row":13,"column":31},"action":"insert","lines":["0"]}],[{"start":{"row":13,"column":29},"end":{"row":13,"column":31},"action":"remove","lines":["80"],"id":38},{"start":{"row":13,"column":29},"end":{"row":13,"column":30},"action":"insert","lines":["5"]},{"start":{"row":13,"column":30},"end":{"row":13,"column":31},"action":"insert","lines":["0"]},{"start":{"row":13,"column":31},"end":{"row":13,"column":32},"action":"insert","lines":["0"]},{"start":{"row":13,"column":32},"end":{"row":13,"column":33},"action":"insert","lines":["0"]}],[{"start":{"row":13,"column":32},"end":{"row":13,"column":33},"action":"remove","lines":["0"],"id":39}],[{"start":{"row":13,"column":32},"end":{"row":13,"column":33},"action":"insert","lines":["1"],"id":40}],[{"start":{"row":13,"column":29},"end":{"row":13,"column":33},"action":"remove","lines":["5001"],"id":41},{"start":{"row":13,"column":29},"end":{"row":13,"column":30},"action":"insert","lines":["8"]},{"start":{"row":13,"column":30},"end":{"row":13,"column":31},"action":"insert","lines":["0"]},{"start":{"row":13,"column":31},"end":{"row":13,"column":32},"action":"insert","lines":["8"]},{"start":{"row":13,"column":32},"end":{"row":13,"column":33},"action":"insert","lines":["0"]}],[{"start":{"row":0,"column":0},"end":{"row":15,"column":0},"action":"remove","lines":["from flask import Flask, render_template","","app = Flask(__name__)","","@app.route('/login')","def login():","    return render_template('login.html')","","@app.route('/register')","def register():","    return render_template('register.html')","","if __name__ == '__main__':","    app.run(debug=True, port=8080, host='0.0.0.0')","",""],"id":42},{"start":{"row":0,"column":0},"end":{"row":29,"column":0},"action":"insert","lines":["from flask import Flask, request, jsonify","import requests","","app = Flask(__name__)","","# Configura la URL base y otros detalles de la API","API_BASE_URL = 'https://api.ejemplo.com'","API_KEY = 'tu_api_key'","","@app.route('/get-data', methods=['GET'])","def get_data():","    response = requests.get(f'{API_BASE_URL}/data', headers={'Authorization': f'Bearer {API_KEY}'})","    if response.status_code == 200:","        data = response.json()","        return jsonify(data)","    else:","        return jsonify({'error': 'Error fetching data'}), response.status_code","","@app.route('/post-data', methods=['POST'])","def post_data():","    payload = request.json","    response = requests.post(f'{API_BASE_URL}/data', json=payload, headers={'Authorization': f'Bearer {API_KEY}'})","    if response.status_code == 201:","        return jsonify({'message': 'Data created successfully'})","    else:","        return jsonify({'error': 'Error creating data'}), response.status_code","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""]}],[{"start":{"row":0,"column":0},"end":{"row":29,"column":0},"action":"remove","lines":["from flask import Flask, request, jsonify","import requests","","app = Flask(__name__)","","# Configura la URL base y otros detalles de la API","API_BASE_URL = 'https://api.ejemplo.com'","API_KEY = 'tu_api_key'","","@app.route('/get-data', methods=['GET'])","def get_data():","    response = requests.get(f'{API_BASE_URL}/data', headers={'Authorization': f'Bearer {API_KEY}'})","    if response.status_code == 200:","        data = response.json()","        return jsonify(data)","    else:","        return jsonify({'error': 'Error fetching data'}), response.status_code","","@app.route('/post-data', methods=['POST'])","def post_data():","    payload = request.json","    response = requests.post(f'{API_BASE_URL}/data', json=payload, headers={'Authorization': f'Bearer {API_KEY}'})","    if response.status_code == 201:","        return jsonify({'message': 'Data created successfully'})","    else:","        return jsonify({'error': 'Error creating data'}), response.status_code","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""],"id":43},{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, url_for, flash, jsonify","import requests","import os","","app = Flask(__name__)","app.secret_key = 'tu_clave_secreta'  # Necesario para mostrar mensajes flash","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'https://api.ejemplo.com')","API_KEY = os.getenv('API_KEY', 'tu_api_key')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        # Aquí iría la lógica para autenticar al usuario contra la base de datos","        response = requests.post(f'{API_BASE_URL}/login', json={'username': username, 'password': password}, headers={'Authorization': f'Bearer {API_KEY}'})","        ","        if response.status_code == 200:","            flash('Inicio de sesión exitoso', 'success')","            return redirect(url_for('dashboard'))  # Suponiendo que existe una ruta de dashboard","        else:","            flash('Inicio de sesión fallido', 'danger')","    ","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        # Lógica para registrar al usuario en la base de datos","        response = requests.post(f'{API_BASE_URL}/register', json={'username': username, 'password': password, 'email': email}, headers={'Authorization': f'Bearer {API_KEY}'})","        ","        if response.status_code == 201:","            flash('Registro exitoso, por favor inicia sesión', 'success')","            return redirect(url_for('login'))","        else:","            flash('Error en el registro', 'danger')","    ","    return render_template('register.html')","","# Ruta de dashboard (o cualquier otra página protegida)","@app.route('/dashboard')","def dashboard():","    # Lógica para mostrar el dashboard del usuario","    return render_template('dashboard.html')","","# Ruta principal","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""]}],[{"start":{"row":8,"column":42},"end":{"row":8,"column":65},"action":"remove","lines":["https://api.ejemplo.com"],"id":44},{"start":{"row":8,"column":42},"end":{"row":8,"column":87},"action":"insert","lines":["http://3.90.210.94:8080/swagger-ui/index.html"]}],[{"start":{"row":5,"column":18},"end":{"row":5,"column":34},"action":"remove","lines":["tu_clave_secreta"],"id":45},{"start":{"row":5,"column":18},"end":{"row":5,"column":19},"action":"insert","lines":["1"]},{"start":{"row":5,"column":19},"end":{"row":5,"column":20},"action":"insert","lines":["2"]},{"start":{"row":5,"column":20},"end":{"row":5,"column":21},"action":"insert","lines":["3"]},{"start":{"row":5,"column":21},"end":{"row":5,"column":22},"action":"insert","lines":["4"]},{"start":{"row":5,"column":22},"end":{"row":5,"column":23},"action":"insert","lines":["5"]},{"start":{"row":5,"column":23},"end":{"row":5,"column":24},"action":"insert","lines":["6"]},{"start":{"row":5,"column":24},"end":{"row":5,"column":25},"action":"insert","lines":["7"]},{"start":{"row":5,"column":25},"end":{"row":5,"column":26},"action":"insert","lines":["8"]},{"start":{"row":5,"column":26},"end":{"row":5,"column":27},"action":"insert","lines":["9"]}],[{"start":{"row":0,"column":0},"end":{"row":61,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, url_for, flash, jsonify","import requests","import os","","app = Flask(__name__)","app.secret_key = '123456789'  # Necesario para mostrar mensajes flash","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/swagger-ui/index.html')","API_KEY = os.getenv('API_KEY', 'tu_api_key')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        # Aquí iría la lógica para autenticar al usuario contra la base de datos","        response = requests.post(f'{API_BASE_URL}/login', json={'username': username, 'password': password}, headers={'Authorization': f'Bearer {API_KEY}'})","        ","        if response.status_code == 200:","            flash('Inicio de sesión exitoso', 'success')","            return redirect(url_for('dashboard'))  # Suponiendo que existe una ruta de dashboard","        else:","            flash('Inicio de sesión fallido', 'danger')","    ","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        # Lógica para registrar al usuario en la base de datos","        response = requests.post(f'{API_BASE_URL}/register', json={'username': username, 'password': password, 'email': email}, headers={'Authorization': f'Bearer {API_KEY}'})","        ","        if response.status_code == 201:","            flash('Registro exitoso, por favor inicia sesión', 'success')","            return redirect(url_for('login'))","        else:","            flash('Error en el registro', 'danger')","    ","    return render_template('register.html')","","# Ruta de dashboard (o cualquier otra página protegida)","@app.route('/dashboard')","def dashboard():","    # Lógica para mostrar el dashboard del usuario","    return render_template('dashboard.html')","","# Ruta principal","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""],"id":46},{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, url_for, flash","import requests","import os","","app = Flask(__name__)","app.secret_key = '1234567890'  # Necesario para mostrar mensajes flash","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/api')  # Cambia a la base correcta de tu API","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        # Lógica para autenticar al usuario contra la API","        try:","            response = requests.post(f'{API_BASE_URL}/login', json={","                'username': username,","                'password': password","            })","            ","            if response.status_code == 200:","                # Suponiendo que la respuesta tiene un token de autenticación","                data = response.json()","                flash('Inicio de sesión exitoso', 'success')","                return redirect(url_for('dashboard'))","            else:","                flash(f'Inicio de sesión fallido: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        # Lógica para registrar al usuario en la base de datos usando la API","        try:","            response = requests.post(f'{API_BASE_URL}/register', json={","                'username': username,","                'password': password,","                'email': email","            })","            ","            if response.status_code == 201:","                flash('Registro exitoso, por favor inicia sesión', 'success')","                return redirect(url_for('login'))","            else:","                flash(f'Error en el registro: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('register.html')","","# Ruta de dashboard (o cualquier otra página protegida)","@app.route('/dashboard')","def dashboard():","    # Aquí iría la lógica para asegurar que el usuario esté autenticado","    return render_template('dashboard.html')","","# Ruta principal que redirige al login","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""]}],[{"start":{"row":0,"column":0},"end":{"row":75,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, url_for, flash","import requests","import os","","app = Flask(__name__)","app.secret_key = '1234567890'  # Necesario para mostrar mensajes flash","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/api')  # Cambia a la base correcta de tu API","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        # Lógica para autenticar al usuario contra la API","        try:","            response = requests.post(f'{API_BASE_URL}/login', json={","                'username': username,","                'password': password","            })","            ","            if response.status_code == 200:","                # Suponiendo que la respuesta tiene un token de autenticación","                data = response.json()","                flash('Inicio de sesión exitoso', 'success')","                return redirect(url_for('dashboard'))","            else:","                flash(f'Inicio de sesión fallido: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        # Lógica para registrar al usuario en la base de datos usando la API","        try:","            response = requests.post(f'{API_BASE_URL}/register', json={","                'username': username,","                'password': password,","                'email': email","            })","            ","            if response.status_code == 201:","                flash('Registro exitoso, por favor inicia sesión', 'success')","                return redirect(url_for('login'))","            else:","                flash(f'Error en el registro: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('register.html')","","# Ruta de dashboard (o cualquier otra página protegida)","@app.route('/dashboard')","def dashboard():","    # Aquí iría la lógica para asegurar que el usuario esté autenticado","    return render_template('dashboard.html')","","# Ruta principal que redirige al login","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""],"id":47},{"start":{"row":0,"column":0},"end":{"row":70,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, url_for, flash","import requests","import os","","app = Flask(__name__)","app.secret_key = '1234567890'","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/api')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        try:","            response = requests.post(f'{API_BASE_URL}/login', json={","                'username': username,","                'password': password","            })","            ","            if response.status_code == 200:","                flash('Inicio de sesión exitoso', 'success')","                return redirect(url_for('dashboard'))","            else:","                flash(f'Inicio de sesión fallido: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        try:","            response = requests.post(f'{API_BASE_URL}/register', json={","                'username': username,","                'password': password,","                'email': email","            })","            ","            if response.status_code == 201:","                flash('Registro exitoso, por favor inicia sesión', 'success')","                return redirect(url_for('login'))","            else:","                flash(f'Error en el registro: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('register.html')","","# Ruta de dashboard","@app.route('/dashboard')","def dashboard():","    return render_template('dashboard.html')","","# Ruta principal","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""]}],[{"start":{"row":0,"column":0},"end":{"row":70,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, url_for, flash","import requests","import os","","app = Flask(__name__)","app.secret_key = '1234567890'","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/api')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        try:","            response = requests.post(f'{API_BASE_URL}/login', json={","                'username': username,","                'password': password","            })","            ","            if response.status_code == 200:","                flash('Inicio de sesión exitoso', 'success')","                return redirect(url_for('dashboard'))","            else:","                flash(f'Inicio de sesión fallido: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        try:","            response = requests.post(f'{API_BASE_URL}/register', json={","                'username': username,","                'password': password,","                'email': email","            })","            ","            if response.status_code == 201:","                flash('Registro exitoso, por favor inicia sesión', 'success')","                return redirect(url_for('login'))","            else:","                flash(f'Error en el registro: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('register.html')","","# Ruta de dashboard","@app.route('/dashboard')","def dashboard():","    return render_template('dashboard.html')","","# Ruta principal","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""],"id":49},{"start":{"row":0,"column":0},"end":{"row":70,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, url_for, flash","import requests","import os","","app = Flask(__name__)","app.secret_key = '1234567890'","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/api')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        try:","            response = requests.post(f'{API_BASE_URL}/login', json={","                'username': username,","                'password': password","            })","            ","            if response.status_code == 200:","                flash('Inicio de sesión exitoso', 'success')","                return redirect(url_for('dashboard'))","            else:","                flash(f'Inicio de sesión fallido: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('login.html')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        try:","            response = requests.post(f'{API_BASE_URL}/register', json={","                'username': username,","                'password': password,","                'email': email","            })","            ","            if response.status_code == 201:","                flash('Registro exitoso, por favor inicia sesión', 'success')","                return redirect(url_for('login'))","            else:","                flash(f'Error en el registro: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('register.html')","","# Ruta de dashboard","@app.route('/dashboard')","def dashboard():","    return render_template('dashboard.html')","","# Ruta principal","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""]}],[{"start":{"row":32,"column":0},"end":{"row":32,"column":1},"action":"insert","lines":["*"],"id":54},{"start":{"row":32,"column":1},"end":{"row":32,"column":2},"action":"insert","lines":["/"]},{"start":{"row":32,"column":2},"end":{"row":32,"column":3},"action":"insert","lines":["/"]},{"start":{"row":32,"column":3},"end":{"row":32,"column":4},"action":"insert","lines":["*"]}],[{"start":{"row":32,"column":0},"end":{"row":32,"column":4},"action":"remove","lines":["*//*"],"id":55}],[{"start":{"row":10,"column":0},"end":{"row":32,"column":0},"action":"remove","lines":["# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET', 'POST'])","def login():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","","        try:","            response = requests.post(f'{API_BASE_URL}/login', json={","                'username': username,","                'password': password","            })","            ","            if response.status_code == 200:","                flash('Inicio de sesión exitoso', 'success')","                return redirect(url_for('dashboard'))","            else:","                flash(f'Inicio de sesión fallido: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('login.html')",""],"id":56},{"start":{"row":10,"column":0},"end":{"row":11,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":47,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, url_for, flash","import requests","import os","","app = Flask(__name__)","app.secret_key = '1234567890'","","# Configuración de la API","API_BASE_URL = os.getenv('API_BASE_URL', 'http://3.90.210.94:8080/api')","","# Ruta para la página de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        username = request.form['username']","        password = request.form['password']","        email = request.form['email']","","        try:","            response = requests.post(f'{API_BASE_URL}/register', json={","                'username': username,","                'password': password,","                'email': email","            })","            ","            if response.status_code == 201:","                flash('Registro exitoso, por favor inicia sesión', 'success')","                return redirect(url_for('login'))","            else:","                flash(f'Error en el registro: {response.json().get(\"message\", \"Error desconocido\")}', 'danger')","        except requests.exceptions.RequestException as e:","            flash(f'Error al conectar con la API: {str(e)}', 'danger')","","    return render_template('register.html')","","# Ruta de dashboard","@app.route('/dashboard')","def dashboard():","    return render_template('dashboard.html')","","# Ruta principal","@app.route('/')","def index():","    return redirect(url_for('login'))","","if __name__ == \"__main__\":","    app.run(debug=True, port=8080, host='0.0.0.0')",""],"id":57},{"start":{"row":0,"column":0},"end":{"row":50,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, flash, url_for","import requests","import json","","app = Flask(__name__)","app.secret_key = 'tu_llave_secreta_aqui'  # Necesaria para manejar mensajes flash","","# Ruta para el formulario de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/usuarios', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","            ","            if response.status_code == 200:","                flash('Registro exitoso', 'success')","                return redirect(url_for('login'))  # Redireccionar al login tras un registro exitoso","            else:","                flash('Error en el registro. Por favor intenta de nuevo.', 'error')","        except Exception as e:","            flash(f'Error en el servidor: {str(e)}', 'error')","","    return render_template('register.html')","","# Ruta para el formulario de login","@app.route('/login')","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":42,"column":0},"end":{"row":42,"column":1},"action":"insert","lines":["#"],"id":58}],[{"start":{"row":44,"column":0},"end":{"row":44,"column":1},"action":"insert","lines":["#"],"id":59}],[{"start":{"row":45,"column":0},"end":{"row":45,"column":1},"action":"insert","lines":["#"],"id":60}],[{"start":{"row":46,"column":0},"end":{"row":46,"column":1},"action":"insert","lines":["#"],"id":61}],[{"start":{"row":47,"column":0},"end":{"row":47,"column":1},"action":"insert","lines":["#"],"id":62}],[{"start":{"row":29,"column":66},"end":{"row":29,"column":74},"action":"remove","lines":["usuarios"],"id":63},{"start":{"row":29,"column":66},"end":{"row":29,"column":67},"action":"insert","lines":["u"]},{"start":{"row":29,"column":67},"end":{"row":29,"column":68},"action":"insert","lines":["s"]},{"start":{"row":29,"column":68},"end":{"row":29,"column":69},"action":"insert","lines":["r"]}],[{"start":{"row":29,"column":68},"end":{"row":29,"column":69},"action":"remove","lines":["r"],"id":64}],[{"start":{"row":29,"column":68},"end":{"row":29,"column":69},"action":"insert","lines":["e"],"id":65},{"start":{"row":29,"column":69},"end":{"row":29,"column":70},"action":"insert","lines":["r"]}],[{"start":{"row":42,"column":0},"end":{"row":47,"column":1},"action":"remove","lines":["#","# Ruta para el formulario de login","#@app.route('/login')","#def login():","#    return render_template('login.html')","#"],"id":66},{"start":{"row":42,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":43,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')",""],"id":67}],[{"start":{"row":46,"column":0},"end":{"row":47,"column":0},"action":"insert","lines":["",""],"id":68}],[{"start":{"row":5,"column":0},"end":{"row":5,"column":81},"action":"remove","lines":["app.secret_key = 'tu_llave_secreta_aqui'  # Necesaria para manejar mensajes flash"],"id":69},{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":6,"column":0},"end":{"row":41,"column":0},"action":"remove","lines":["# Ruta para el formulario de registro","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/user', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","            ","            if response.status_code == 200:","                flash('Registro exitoso', 'success')","                return redirect(url_for('login'))  # Redireccionar al login tras un registro exitoso","            else:","                flash('Error en el registro. Por favor intenta de nuevo.', 'error')","        except Exception as e:","            flash(f'Error en el servidor: {str(e)}', 'error')","","    return render_template('register.html')",""],"id":70},{"start":{"row":6,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["@app.route('/register', methods=['POST'])","def register():","    data = request.get_json()","","    id = data['id']","    nombre = data['nombre']","    apellido = data['apellido']","    email = data['email']","    rol = data['rol']","","    # Preparar los datos para enviar a la API","    register_data = {","        \"id\": id,","        \"nombre\": nombre,","        \"apellido\": apellido,","        \"email\": email,","        \"rol\": rol","    }","","    try:","        # Enviar los datos a la API usando requests","        response = requests.post('http://3.90.210.94:8080/api/usuarios', ","                                 data=json.dumps(register_data), ","                                 headers={'Content-Type': 'application/json'})","        ","        if response.status_code == 200:","            return jsonify({'success': True})","        else:","            return jsonify({'success': False, 'error': 'Error en la API'})","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})",""]}],[{"start":{"row":0,"column":0},"end":{"row":2,"column":11},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, flash, url_for","import requests","import json"],"id":71},{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, flash, url_for, jsonify","import requests","import json",""]}],[{"start":{"row":2,"column":11},"end":{"row":3,"column":0},"action":"remove","lines":["",""],"id":72}],[{"start":{"row":6,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["@app.route('/register', methods=['POST'])","def register():","    data = request.get_json()","","    id = data['id']","    nombre = data['nombre']","    apellido = data['apellido']","    email = data['email']","    rol = data['rol']","","    # Preparar los datos para enviar a la API","    register_data = {","        \"id\": id,","        \"nombre\": nombre,","        \"apellido\": apellido,","        \"email\": email,","        \"rol\": rol","    }","","    try:","        # Enviar los datos a la API usando requests","        response = requests.post('http://3.90.210.94:8080/api/usuarios', ","                                 data=json.dumps(register_data), ","                                 headers={'Content-Type': 'application/json'})","        ","        if response.status_code == 200:","            return jsonify({'success': True})","        else:","            return jsonify({'success': False, 'error': 'Error en la API'})","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})",""],"id":73},{"start":{"row":6,"column":0},"end":{"row":42,"column":0},"action":"insert","lines":["@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Procesa el formulario de registro","        data = request.get_json()","","        id = data['id']","        nombre = data['nombre']","        apellido = data['apellido']","        email = data['email']","        rol = data['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/usuarios', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si el método es GET, simplemente muestra la página de registro","    return render_template('register.html')",""]}],[{"start":{"row":6,"column":0},"end":{"row":42,"column":0},"action":"remove","lines":["@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Procesa el formulario de registro","        data = request.get_json()","","        id = data['id']","        nombre = data['nombre']","        apellido = data['apellido']","        email = data['email']","        rol = data['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/usuarios', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si el método es GET, simplemente muestra la página de registro","    return render_template('register.html')",""],"id":75},{"start":{"row":6,"column":0},"end":{"row":40,"column":0},"action":"insert","lines":["@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Procesar datos enviados como 'form-data'","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/usuarios', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')",""]}],[{"start":{"row":27,"column":66},"end":{"row":27,"column":74},"action":"remove","lines":["usuarios"],"id":76},{"start":{"row":27,"column":66},"end":{"row":27,"column":67},"action":"insert","lines":["u"]},{"start":{"row":27,"column":67},"end":{"row":27,"column":68},"action":"insert","lines":["s"]},{"start":{"row":27,"column":68},"end":{"row":27,"column":69},"action":"insert","lines":["e"]},{"start":{"row":27,"column":69},"end":{"row":27,"column":70},"action":"insert","lines":["r"]}],[{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, flash, url_for, jsonify","import requests","import json","","app = Flask(__name__)","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Procesar datos enviados como 'form-data'","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/user', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":77},{"start":{"row":0,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request, redirect, flash, url_for, jsonify, session","import requests","import json","from datetime import datetime","","app = Flask(__name__)","app.secret_key = 'your_secret_key'  # Necesario para usar sesiones","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Procesar datos enviados como 'form-data'","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/user', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","@app.route('/formulario', methods=['GET', 'POST'])","def formulario():","    if 'usuario' not in session:","        return redirect(url_for('login'))","","    if request.method == 'POST':","        operador = session.get('usuario')","        fecha_hora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')","        id_planta = request.form['id_planta']","        estado = request.form['estado']","        observaciones = request.form.get('observaciones', '')","","        # Procesar los datos del formulario","        form_data = {","            \"operador\": operador,","            \"fecha_hora\": fecha_hora,","            \"id_planta\": id_planta,","            \"estado\": estado,","            \"observaciones\": observaciones","        }","","        # Aquí podrías enviar los datos a una API o almacenarlos en una base de datos","        # Ejemplo de enviar a una API","        try:","            response = requests.post('http://3.90.210.94:8080/api/registro', ","                                     data=json.dumps(form_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                flash('Formulario enviado correctamente', 'success')","            else:","                flash('Error al enviar el formulario', 'error')","        except Exception as e:","            flash(f'Error: {str(e)}', 'error')","","        return redirect(url_for('formulario'))","","    return render_template('formulario.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":47,"column":0},"end":{"row":84,"column":45},"action":"remove","lines":["@app.route('/formulario', methods=['GET', 'POST'])","def formulario():","    if 'usuario' not in session:","        return redirect(url_for('login'))","","    if request.method == 'POST':","        operador = session.get('usuario')","        fecha_hora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')","        id_planta = request.form['id_planta']","        estado = request.form['estado']","        observaciones = request.form.get('observaciones', '')","","        # Procesar los datos del formulario","        form_data = {","            \"operador\": operador,","            \"fecha_hora\": fecha_hora,","            \"id_planta\": id_planta,","            \"estado\": estado,","            \"observaciones\": observaciones","        }","","        # Aquí podrías enviar los datos a una API o almacenarlos en una base de datos","        # Ejemplo de enviar a una API","        try:","            response = requests.post('http://3.90.210.94:8080/api/registro', ","                                     data=json.dumps(form_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                flash('Formulario enviado correctamente', 'success')","            else:","                flash('Error al enviar el formulario', 'error')","        except Exception as e:","            flash(f'Error: {str(e)}', 'error')","","        return redirect(url_for('formulario'))","","    return render_template('formulario.html')"],"id":78},{"start":{"row":47,"column":0},"end":{"row":80,"column":0},"action":"insert","lines":["@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Procesar los datos del formulario","        operador = session.get('usuario')","        fecha_hora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')","        id_planta = request.form['id_planta']","        estado = request.form['estado']","        observaciones = request.form.get('observaciones', '')","","        # Aquí podrías enviar los datos a una API o almacenarlos en una base de datos","        form_data = {","            \"operador\": operador,","            \"fecha_hora\": fecha_hora,","            \"id_planta\": id_planta,","            \"estado\": estado,","            \"observaciones\": observaciones","        }","","        # Ejemplo de enviar a una API","        try:","            response = requests.post('http://3.90.210.94:8080/api/registro', ","                                     data=json.dumps(form_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                flash('Formulario enviado correctamente', 'success')","            else:","                flash('Error al enviar el formulario', 'error')","        except Exception as e:","            flash(f'Error: {str(e)}', 'error')","","        return redirect(ur",""]}],[{"start":{"row":47,"column":0},"end":{"row":80,"column":0},"action":"remove","lines":["@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Procesar los datos del formulario","        operador = session.get('usuario')","        fecha_hora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')","        id_planta = request.form['id_planta']","        estado = request.form['estado']","        observaciones = request.form.get('observaciones', '')","","        # Aquí podrías enviar los datos a una API o almacenarlos en una base de datos","        form_data = {","            \"operador\": operador,","            \"fecha_hora\": fecha_hora,","            \"id_planta\": id_planta,","            \"estado\": estado,","            \"observaciones\": observaciones","        }","","        # Ejemplo de enviar a una API","        try:","            response = requests.post('http://3.90.210.94:8080/api/registro', ","                                     data=json.dumps(form_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                flash('Formulario enviado correctamente', 'success')","            else:","                flash('Error al enviar el formulario', 'error')","        except Exception as e:","            flash(f'Error: {str(e)}', 'error')","","        return redirect(ur",""],"id":79},{"start":{"row":47,"column":0},"end":{"row":82,"column":0},"action":"insert","lines":["@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Procesar los datos del formulario","        operador = session.get('usuario')","        fecha_hora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')","        id_planta = request.form['id_planta']","        estado = request.form['estado']","        observaciones = request.form.get('observaciones', '')","","        # Aquí podrías enviar los datos a una API o almacenarlos en una base de datos","        form_data = {","            \"operador\": operador,","            \"fecha_hora\": fecha_hora,","            \"id_planta\": id_planta,","            \"estado\": estado,","            \"observaciones\": observaciones","        }","","        # Ejemplo de enviar a una API","        try:","            response = requests.post('http://3.90.210.94:8080/api/registro', ","                                     data=json.dumps(form_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                flash('Formulario enviado correctamente', 'success')","            else:","                flash('Error al enviar el formulario', 'error')","        except Exception as e:","            flash(f'Error: {str(e)}', 'error')","","        return redirect(url_for('registroplanta'))","","    return render_template('registroplanta.html')",""]}],[{"start":{"row":0,"column":0},"end":{"row":86,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request, redirect, flash, url_for, jsonify, session","import requests","import json","from datetime import datetime","","app = Flask(__name__)","app.secret_key = 'your_secret_key'  # Necesario para usar sesiones","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Procesar datos enviados como 'form-data'","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Enviar los datos a la API usando requests","            response = requests.post('http://3.90.210.94:8080/api/user', ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Procesar los datos del formulario","        operador = session.get('usuario')","        fecha_hora = datetime.now().strftime('%Y-%m-%d %H:%M:%S')","        id_planta = request.form['id_planta']","        estado = request.form['estado']","        observaciones = request.form.get('observaciones', '')","","        # Aquí podrías enviar los datos a una API o almacenarlos en una base de datos","        form_data = {","            \"operador\": operador,","            \"fecha_hora\": fecha_hora,","            \"id_planta\": id_planta,","            \"estado\": estado,","            \"observaciones\": observaciones","        }","","        # Ejemplo de enviar a una API","        try:","            response = requests.post('http://3.90.210.94:8080/api/registro', ","                                     data=json.dumps(form_data), ","                                     headers={'Content-Type': 'application/json'})","","            if response.status_code == 200:","                flash('Formulario enviado correctamente', 'success')","            else:","                flash('Error al enviar el formulario', 'error')","        except Exception as e:","            flash(f'Error: {str(e)}', 'error')","","        return redirect(url_for('registroplanta'))","","    return render_template('registroplanta.html')","","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":80},{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify","","app = Flask(__name__)","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Capturar los datos del formulario","        id = request.form.get('id')","        nombre = request.form.get('nombre')","        apellido = request.form.get('apellido')","        email = request.form.get('email')","        rol = request.form.get('rol')","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        # Enviar los datos a la API","        try:","            response = requests.post('http://3.90.210.94:8080/api/user', ","                                     json=register_data,  # Cambiado a 'json'","                                     headers={'Content-Type': 'application/json'})","","            # Revisar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Mostrar el formulario si es una solicitud GET","    return render_template('register.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":41,"column":0},"end":{"row":42,"column":0},"action":"insert","lines":["",""],"id":81}],[{"start":{"row":42,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')",""],"id":82}],[{"start":{"row":45,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["",""],"id":83}],[{"start":{"row":27,"column":38},"end":{"row":27,"column":70},"action":"remove","lines":["http://3.90.210.94:8080/api/user"],"id":84},{"start":{"row":27,"column":38},"end":{"row":27,"column":115},"action":"insert","lines":["http://3.90.210.94:8080/swagger-ui/index.html#/usuario-controller/saveUsuario"]}],[{"start":{"row":28,"column":58},"end":{"row":28,"column":77},"action":"remove","lines":["# Cambiado a 'json'"],"id":85}],[{"start":{"row":6,"column":0},"end":{"row":40,"column":43},"action":"remove","lines":["@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Capturar los datos del formulario","        id = request.form.get('id')","        nombre = request.form.get('nombre')","        apellido = request.form.get('apellido')","        email = request.form.get('email')","        rol = request.form.get('rol')","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        # Enviar los datos a la API","        try:","            response = requests.post('http://3.90.210.94:8080/swagger-ui/index.html#/usuario-controller/saveUsuario', ","                                     json=register_data,  ","                                     headers={'Content-Type': 'application/json'})","","            # Revisar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Mostrar el formulario si es una solicitud GET","    return render_template('register.html')"],"id":86},{"start":{"row":6,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Capturar los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # Asegurarnos de que la URL correcta sea la del endpoint de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviar los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')",""]}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":49},"action":"remove","lines":["# Preparar los datos para enviar a la API"],"id":87},{"start":{"row":16,"column":8},"end":{"row":17,"column":0},"action":"remove","lines":["",""]},{"start":{"row":16,"column":8},"end":{"row":16,"column":12},"action":"remove","lines":["    "]}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":12},"action":"remove","lines":["    "],"id":88}],[{"start":{"row":9,"column":8},"end":{"row":9,"column":42},"action":"remove","lines":["# Capturar los datos del formulari"],"id":89},{"start":{"row":9,"column":8},"end":{"row":9,"column":9},"action":"remove","lines":["o"]}],[{"start":{"row":25,"column":14},"end":{"row":25,"column":77},"action":"remove","lines":["Asegurarnos de que la URL correcta sea la del endpoint de la AP"],"id":90}],[{"start":{"row":25,"column":14},"end":{"row":25,"column":15},"action":"insert","lines":["u"],"id":91},{"start":{"row":25,"column":15},"end":{"row":25,"column":16},"action":"insert","lines":["r"]},{"start":{"row":25,"column":16},"end":{"row":25,"column":17},"action":"insert","lines":["l"]}],[{"start":{"row":25,"column":17},"end":{"row":25,"column":18},"action":"insert","lines":[" "],"id":92},{"start":{"row":25,"column":18},"end":{"row":25,"column":19},"action":"insert","lines":["a"]}],[{"start":{"row":25,"column":18},"end":{"row":25,"column":19},"action":"remove","lines":["a"],"id":93}],[{"start":{"row":25,"column":18},"end":{"row":25,"column":19},"action":"insert","lines":["A"],"id":94},{"start":{"row":25,"column":19},"end":{"row":25,"column":20},"action":"insert","lines":["P"]}],[{"start":{"row":28,"column":19},"end":{"row":28,"column":20},"action":"remove","lines":["r"],"id":95}],[{"start":{"row":28,"column":19},"end":{"row":28,"column":20},"action":"insert","lines":["d"],"id":96}],[{"start":{"row":28,"column":19},"end":{"row":28,"column":20},"action":"remove","lines":["d"],"id":97}],[{"start":{"row":28,"column":19},"end":{"row":28,"column":20},"action":"insert","lines":["n"],"id":98},{"start":{"row":28,"column":20},"end":{"row":28,"column":21},"action":"insert","lines":["d"]},{"start":{"row":28,"column":21},"end":{"row":28,"column":22},"action":"insert","lines":["o"]}],[{"start":{"row":28,"column":22},"end":{"row":28,"column":23},"action":"insert","lines":[" "],"id":99}],[{"start":{"row":28,"column":23},"end":{"row":28,"column":24},"action":"remove","lines":[" "],"id":100},{"start":{"row":28,"column":23},"end":{"row":28,"column":24},"action":"remove","lines":["l"]},{"start":{"row":28,"column":23},"end":{"row":28,"column":24},"action":"remove","lines":["o"]},{"start":{"row":28,"column":23},"end":{"row":28,"column":24},"action":"remove","lines":["s"]},{"start":{"row":28,"column":23},"end":{"row":28,"column":24},"action":"remove","lines":[" "]}],[{"start":{"row":0,"column":0},"end":{"row":52,"column":0},"action":"remove","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify","","app = Flask(__name__)","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        ","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # url API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":101},{"start":{"row":0,"column":0},"end":{"row":106,"column":0},"action":"insert","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","# Ruta para la página principal (Home)","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","# Ruta para registrar una nueva planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","# Ruta para el registro de usuarios (interactúa con la API)","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # URL de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":6,"column":0},"end":{"row":9,"column":39},"action":"remove","lines":["# Ruta para la página principal (Home)","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')"],"id":103},{"start":{"row":6,"column":0},"end":{"row":9,"column":0},"action":"insert","lines":["@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')",""]}],[{"start":{"row":6,"column":17},"end":{"row":6,"column":18},"action":"insert","lines":["u"],"id":104},{"start":{"row":6,"column":18},"end":{"row":6,"column":19},"action":"insert","lines":["s"]},{"start":{"row":6,"column":19},"end":{"row":6,"column":20},"action":"insert","lines":["u"]},{"start":{"row":6,"column":20},"end":{"row":6,"column":21},"action":"insert","lines":["a"]},{"start":{"row":6,"column":21},"end":{"row":6,"column":22},"action":"insert","lines":["r"]},{"start":{"row":6,"column":22},"end":{"row":6,"column":23},"action":"insert","lines":["i"]},{"start":{"row":6,"column":23},"end":{"row":6,"column":24},"action":"insert","lines":["o"]}],[{"start":{"row":8,"column":32},"end":{"row":8,"column":33},"action":"insert","lines":["u"],"id":105},{"start":{"row":8,"column":33},"end":{"row":8,"column":34},"action":"insert","lines":["s"]},{"start":{"row":8,"column":34},"end":{"row":8,"column":35},"action":"insert","lines":["u"]},{"start":{"row":8,"column":35},"end":{"row":8,"column":36},"action":"insert","lines":["a"]},{"start":{"row":8,"column":36},"end":{"row":8,"column":37},"action":"insert","lines":["r"]},{"start":{"row":8,"column":37},"end":{"row":8,"column":38},"action":"insert","lines":["i"]},{"start":{"row":8,"column":38},"end":{"row":8,"column":39},"action":"insert","lines":["o"]}],[{"start":{"row":0,"column":0},"end":{"row":106,"column":0},"action":"remove","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","@app.route('/homeusuario', methods=['GET'])","def home():","    return render_template('homeusuario.html')","","","# Ruta para registrar una nueva planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","# Ruta para el registro de usuarios (interactúa con la API)","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # URL de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":106},{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","# Ruta para la página principal (Home)","@app.route('/', methods=['GET'])","def index():","    return redirect(url_for('home'))","","# Ruta para la página principal (Home)","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","# Ruta para registrar una nueva planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","# Ruta para el registro de usuarios (interactúa con la API)","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id",""]}],[{"start":{"row":0,"column":0},"end":{"row":78,"column":0},"action":"remove","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","# Ruta para la página principal (Home)","@app.route('/', methods=['GET'])","def index():","    return redirect(url_for('home'))","","# Ruta para la página principal (Home)","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","# Ruta para registrar una nueva planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","# Ruta para el registro de usuarios (interactúa con la API)","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id",""],"id":107},{"start":{"row":0,"column":0},"end":{"row":111,"column":0},"action":"insert","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","# Ruta para la página principal (Home)","@app.route('/', methods=['GET'])","def index():","    return redirect(url_for('home'))","","# Ruta para la página principal (Home)","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","# Ruta para registrar una nueva planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","# Ruta para el registro de usuarios (interactúa con la API)","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # URL de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":14,"column":39},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":108},{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":15,"column":0},"end":{"row":15,"column":4},"action":"remove","lines":["    "],"id":109}],[{"start":{"row":15,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["",""],"id":110}],[{"start":{"row":16,"column":0},"end":{"row":18,"column":49},"action":"insert","lines":["@app.route('/homesupervisor', methods=['GET'])","def homesupervisor():","    return render_template('homesupervisor.html')"],"id":111}],[{"start":{"row":0,"column":0},"end":{"row":115,"column":0},"action":"remove","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","# Ruta para la página principal (Home)","@app.route('/', methods=['GET'])","def index():","    return redirect(url_for('home'))","","# Ruta para la página principal (Home)","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","@app.route('/homesupervisor', methods=['GET'])","def homesupervisor():","    return render_template('homesupervisor.html')","","# Ruta para registrar una nueva planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","# Ruta para el registro de usuarios (interactúa con la API)","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # URL de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","# Ruta para la página de inicio de sesión","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":112},{"start":{"row":0,"column":0},"end":{"row":105,"column":0},"action":"insert","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","@app.route('/homesupervisor', methods=['GET'])","def homesupervisor():","    return render_template('homesupervisor.html')","","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # URL de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":0,"column":0},"end":{"row":105,"column":0},"action":"remove","lines":["import requests","import json","from flask import Flask, render_template, request, jsonify, redirect, url_for","","app = Flask(__name__)","","@app.route('/home', methods=['GET'])","def home():","    return render_template('home.html')","","@app.route('/homesupervisor', methods=['GET'])","def homesupervisor():","    return render_template('homesupervisor.html')","","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    if request.method == 'POST':","        # Obtener datos del formulario","        tag = request.form['tag']","        especie = request.form['especie']","        fecha_germinacion = request.form['fecha_germinacion']","        condiciones = request.form['condiciones']","","        # Preparar los datos para enviar a la API o guardar en BD","        planta_data = {","            \"tag\": tag,","            \"especie\": especie,","            \"fecha_germinacion\": fecha_germinacion,","            \"condiciones\": condiciones","        }","","        try:","            # Aquí puedes agregar la lógica para guardar la planta en la base de datos o llamar a la API correspondiente","            # Por ejemplo:","            # response = requests.post('URL_API_AQUI', json=planta_data)","","            return jsonify({'success': True, 'message': 'Planta registrada con éxito'})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","    ","    # Si es GET, mostrar el formulario de registro de planta","    return render_template('registroplanta.html')","","@app.route('/consultar', methods=['GET'])","def consultar():","    try:","        # Aquí puedes llamar a la API o la base de datos para obtener la lista de plantas","        # Ejemplo de llamada API:","        # response = requests.get('URL_API_AQUI')","        # plantas = response.json()","","        plantas = [","            {\"tag\": \"123\", \"especie\": \"Rosa\", \"fecha_germinacion\": \"2024-01-01\", \"condiciones\": \"Sombra\"},","            {\"tag\": \"124\", \"especie\": \"Tulipán\", \"fecha_germinacion\": \"2024-02-15\", \"condiciones\": \"Sol\"}","        ]","","        return render_template('consulta.html', plantas=plantas)","    except Exception as e:","        return jsonify({'success': False, 'error': str(e)})","","@app.route('/register', methods=['GET', 'POST'])","def register():","    if request.method == 'POST':","        # Obtener los datos del formulario","        id = request.form['id']","        nombre = request.form['nombre']","        apellido = request.form['apellido']","        email = request.form['email']","        rol = request.form['rol']","","        # Preparar los datos para enviar a la API","        register_data = {","            \"id\": id,","            \"nombre\": nombre,","            \"apellido\": apellido,","            \"email\": email,","            \"rol\": rol","        }","","        try:","            # URL de la API","            api_url = 'http://3.90.210.94:8080/api/usuario/saveUsuario'","","            # Enviando los datos a la API usando POST","            response = requests.post(api_url, ","                                     data=json.dumps(register_data), ","                                     headers={'Content-Type': 'application/json'})","","            # Verificar la respuesta de la API","            if response.status_code == 200:","                return jsonify({'success': True})","            else:","                return jsonify({'success': False, 'error': 'Error en la API', 'status_code': response.status_code})","        except Exception as e:","            return jsonify({'success': False, 'error': str(e)})","","    # Si es GET, mostrar el formulario de registro","    return render_template('register.html')","","@app.route('/login', methods=['GET'])","def login():","    return render_template('login.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""],"id":113},{"start":{"row":0,"column":0},"end":{"row":36,"column":0},"action":"insert","lines":["from flask import Flask, render_template","","app = Flask(__name__)","","# Ruta para la página de inicio","@app.route('/home')","def home():","    return render_template('home.html')","","# Ruta para registrar una planta","@app.route('/registroplanta', methods=['GET', 'POST'])","def registroplanta():","    return render_template('registroplanta.html')","","# Ruta para consultar la información de las plantas","@app.route('/consultar')","def consultar():","    return render_template('consulta.html')","","# Ruta para el registro de usuarios","@app.route('/register', methods=['GET', 'POST'])","def register():","    return render_template('register.html')","","# Ruta para la página de inicio de sesión","@app.route('/login')","def login():","    return render_template('login.html')","","# Ruta para la página homesupervisor","@app.route('/homesupervisor')","def homesupervisor():","    return render_template('homesupervisor.html')","","if __name__ == '__main__':","    app.run(debug=True, host=\"0.0.0.0\", port=8080)",""]}],[{"start":{"row":12,"column":49},"end":{"row":13,"column":0},"action":"insert","lines":["",""],"id":114},{"start":{"row":13,"column":0},"end":{"row":13,"column":4},"action":"insert","lines":["    "]},{"start":{"row":13,"column":4},"end":{"row":14,"column":0},"action":"insert","lines":["",""]},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"remove","lines":["    "],"id":115},{"start":{"row":13,"column":4},"end":{"row":14,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":13,"column":4},"end":{"row":14,"column":0},"action":"insert","lines":["",""],"id":116},{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":14,"column":0},"end":{"row":14,"column":4},"action":"remove","lines":["    "],"id":117}],[{"start":{"row":14,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["@app.route('/formulario', methods=['POST'])","def formulario():","    # Aquí va el código para manejar los datos del formulario","    # Puedes agregar lógica para procesar el formulario y redirigir o mostrar una respuesta","    return 'Formulario recibido'  # Cambia esto según lo que desees hacer",""],"id":118}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":19,"column":0},"end":{"row":19,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1725591582276,"hash":"a39f89772a82afe05571f98373ee1282a7b38652"}